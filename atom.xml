<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://GoldenRocking.github.io</id>
    <title>ugosunny</title>
    <updated>2022-12-10T17:23:42.701Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://GoldenRocking.github.io"/>
    <link rel="self" href="https://GoldenRocking.github.io/atom.xml"/>
    <subtitle>日出东方，唯我不败</subtitle>
    <logo>https://GoldenRocking.github.io/images/avatar.png</logo>
    <icon>https://GoldenRocking.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, ugosunny</rights>
    <entry>
        <title type="html"><![CDATA[2022.12.11]]></title>
        <id>https://GoldenRocking.github.io/post/20221211/</id>
        <link href="https://GoldenRocking.github.io/post/20221211/">
        </link>
        <updated>2022-12-10T17:21:53.000Z</updated>
        <content type="html"><![CDATA[<h4 id="总是历尽千千劫一腔孤勇应犹在">总是历尽千千劫，一腔孤勇应犹在！😀😃😄</h4>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二十几岁要练“嘴”，不要输在不会表达上]]></title>
        <id>https://GoldenRocking.github.io/post/二十几岁要练“嘴”，不要输在不会表达上/</id>
        <link href="https://GoldenRocking.github.io/post/二十几岁要练“嘴”，不要输在不会表达上/">
        </link>
        <updated>2020-11-10T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>读书笔记--《二十几岁如何投资自己》</p>
<blockquote>
<h3 id="语言有点弹性有时候话要模糊说">语言有点弹性，有时候话要模糊说</h3>
</blockquote>
<ol>
<li>当你想指出别人某些缺点的时候，最好不要直接说出来，而要避开问题的关键，换一种方式来表达。</li>
<li>在一些不必要、不可能或不便于把话说得太实、太死的时候，利用“模糊”语言让你的表意更有“弹性”。</li>
</ol>
<blockquote>
<p>###在说话这件事上，千万不要“一视同仁”</p>
</blockquote>
<ol>
<li>与不同的人打交道时，要注意用不同的说话方式，尽可能使对方感到舒服和应情应景。</li>
<li>不能对待任何问题都用一种眼光、一种态度、一种办法来解决。</li>
<li>大千世界有各色人等，他们的心理特点、脾气秉性、语言习惯各不相同，这些因素决定了他们对语言信息的要求也是不同的。不能用统一的标准或方式来交流，因人而异是非常必要的。</li>
</ol>
<blockquote>
<h3 id="不怯场关键时刻要能口若悬河">不怯场，关键时刻要能口若悬河</h3>
</blockquote>
<ol>
<li>消除心中的羞怯感是训练语言能力的第一步。</li>
<li>把精力全部放在事件发生时的情景上</li>
<li>借助周围的人激励自己</li>
</ol>
<blockquote>
<h3 id="掌握一点口语化讲话艺术">掌握一点口语化讲话艺术</h3>
</blockquote>
<ol>
<li>尽量用双音节词，并注意词语的音节搭配。</li>
<li>在用词风格上，多用通俗生动的“现成话”，而不要文白夹杂。</li>
<li>句式要简短而灵活。</li>
</ol>
<blockquote>
<h3 id="你的欣赏要说出来让对方知道">你的欣赏要说出来让对方知道</h3>
</blockquote>
<ol>
<li>欣赏别人是一种尊重，被别人欣赏是一种承认，无人欣赏则为一种大不幸。</li>
<li>欣赏不同于好奇，需要有一双睿智而又真诚的眼睛；欣赏不同于猎艳，需要具备艺术的敏锐心灵，需要那份澄澈境界的雄阔。</li>
<li>一个懂得欣赏别人的人，在把慰藉和力量给了他人的同时，也把激励和鞭策给了自己。</li>
<li>真正的欣赏是真诚和善意的流露，是理解和尊重的体现。</li>
<li>对于他人的成绩与进步，要肯定、要赞扬、要鼓励。</li>
</ol>
<blockquote>
<h3 id="找好话题谈话就成功了一半">找好话题，谈话就成功了一半</h3>
</blockquote>
<ol>
<li>当跟众多的人在一起谈话时，要选择众人都感兴趣的事件为话题，激发起大家交谈的欲望。</li>
<li>就地取材找话题。但关键是要思维敏捷，能迅速做出由此及彼的联想。</li>
<li>试探询问找话题。</li>
<li>顺着对方的兴趣引发话题。</li>
<li>在“情投意合”上做文章找话题。</li>
</ol>
<blockquote>
<h3 id="少说我多谈谈你">少说“我”，多谈谈“你”</h3>
</blockquote>
<ol>
<li>语言中最重要的5个字是：“我以你为荣！”</li>
<li>语言中最重要的4个字是：“您怎么看？”</li>
<li>语言中最重要的3个字是：“麻烦您！”</li>
<li>语言中最重要的2个字是：“谢谢！”</li>
<li>语言中最重要的1个字是：“你！”</li>
<li>说话时，把“我的”变为“我们的”，可以巧妙地拉近双方距离，使对方更容易接受你和你的话。</li>
</ol>
<blockquote>
<h3 id="做一个说话不让人扫兴的人">做一个说话不让人扫兴的人</h3>
</blockquote>
<ol>
<li>在价值观不同的沟通中，在非原则问题上，我们应该尽量满足他人的表达欲望与表达方向，应当尽可能尊重他人的人生观、价值观。</li>
<li>扫兴者有两种可能：一是讲到别人不爱听的话，讲到别人的短处；二是打断转移说者的说话兴致，中断正在进行的谈话。</li>
<li>说话是要注意分寸的。</li>
<li>说话是有场合的。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二十几岁投资人际资源，三十几岁才能享用]]></title>
        <id>https://GoldenRocking.github.io/post/二十几岁投资人际资源，三十几岁才能享用/</id>
        <link href="https://GoldenRocking.github.io/post/二十几岁投资人际资源，三十几岁才能享用/">
        </link>
        <updated>2020-11-08T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>读书笔记--《二十几岁如何投资自己》</p>
<blockquote>
<h3 id="为什么要跟成功人士在一起">为什么要跟成功人士在一起</h3>
</blockquote>
<ol>
<li>我们所要复制的不是成功人士的人生或者经历，而要学习他们的思维习惯。</li>
<li>一个人要想取得成功，就必须结交一些成功人士，为自己日后的成功铺路。</li>
<li>只要你的身边有一群准备成功的人，你也能被他们的情绪和冲劲感染，保持成功的欲望和信心。</li>
</ol>
<blockquote>
<h3 id="如何经营自己身边的高端人际资源">如何经营自己身边的高端人际资源</h3>
</blockquote>
<ol>
<li>每个人都应把扩展人际资源网当作自己人生的长期任务，常抓不懈。</li>
<li>成功建立关系网的关键，是选择合适的人建立稳固的关系。</li>
<li>要对自己认识的人进行分析，列出哪些人是最重要的，哪些人是比较重要的，哪些人是次要的，根据自己的需要给这些人排队。</li>
<li>一个合理的人际结构必须是能够进行自我调节的动态结构。</li>
<li>我们在建造人际结构时，就要努力为自己建造一种善于进行新陈代谢的、高等的开放性人际结构。</li>
</ol>
<blockquote>
<h3 id="好人际资源慢慢经营切勿急功近利">好人际资源慢慢经营，切勿急功近利</h3>
</blockquote>
<ol>
<li>平时多去“冷庙”烧香，急时自有“神仙”相助。</li>
<li>人与人之间的关系会随着平时联络的增加而加深，久不见面的朋友自然会日渐疏远。</li>
<li>对人情的投资，最忌讳急功近利。</li>
<li>人际资源不只在建立，也要重视平时的经营，否则时间长了，人际关系也就淡了。</li>
</ol>
<blockquote>
<h3 id="管好人情账户不要打折不要透支">管好人情账户，不要打折不要透支</h3>
</blockquote>
<ol>
<li>
<p>每个人的心中都有一个银行，都设有一本感情账。而能够充实感情账，使感情储蓄日益丰厚的，只能是你对他人真诚的关心、支持和帮助。</p>
</li>
<li>
<p>人与人相互连接、相互需要的，不能光用现实的眼光来看。</p>
</li>
<li>
<p>给人好处需有度。</p>
</li>
<li>
<p>关怀没有标准，实质的关怀、精神的关怀都可以，在对方不得意或生活遭遇困难时，这种关怀特别具有力量。</p>
</li>
<li>
<p>不要伤害别人，有心或无心的伤害对人际关系的损害都很大。</p>
</li>
<li>
<p>当别人帮助了你之后，你要有适度的回馈，也就是“还人情”。</p>
</li>
</ol>
<blockquote>
<h3 id="有四种朋友这一生不可错过">有四种朋友这一生不可错过</h3>
</blockquote>
<ol>
<li>
<p>支持你的朋友</p>
</li>
<li>
<p>志同道合的朋友</p>
</li>
<li>
<p>牵线搭桥的朋友</p>
</li>
<li>
<p>开阔眼界的朋友</p>
</li>
<li>
<p>真正的朋友可能是那个你平常并不怎么关注的人，所谓“患难见真情”，那个在你陷入困难时向你伸出援助之手的人才是真正的朋友。</p>
</li>
<li>
<p>人生中，好朋友难得，所以要倍加珍惜。</p>
</li>
</ol>
<blockquote>
<h3 id="二十几岁凭什么让人喜欢你">二十几岁，凭什么让人喜欢你</h3>
</blockquote>
<ol>
<li>
<p>保持一种平和的心态，做好你自己的事，对别人尊敬，多替别人着想，尽量改变自己的一些不好的习惯和举止。</p>
</li>
<li>
<p>要对自己有信心。</p>
</li>
<li>
<p>要成为自信者，就要像自信者一样去行动。</p>
</li>
<li>
<p>想到的时候，就开始去做。</p>
</li>
<li>
<p>把微笑挂在脸上。</p>
</li>
<li>
<p>如果长得不好，就让自己有才气；如果才气也没有，那就保持微笑。</p>
</li>
<li>
<p>气质是关键。如果时尚学不好，宁愿纯朴。</p>
</li>
<li>
<p>不要向朋友借钱。</p>
</li>
<li>
<p>与人打“的”时，请抢先坐在司机旁。</p>
</li>
<li>
<p>不要把过去的事全让人知道。</p>
</li>
<li>
<p>自我批评总能让人相信，自我表扬则不然。</p>
</li>
<li>
<p>没有什么东西比围观者们更能提高你的成绩了，所以平常不要吝惜你的喝彩声。</p>
</li>
<li>
<p>不要把别人对你的好，视为理所当然，要知道感恩。</p>
</li>
<li>
<p>尊重传达室里的师傅及搞卫生的阿姨。</p>
</li>
<li>
<p>为每一位上台唱歌的人鼓掌。</p>
</li>
<li>
<p>有时要明知故问：你的钻戒很贵吧！有时，即使想问也不能问，比如：你多大了？</p>
</li>
<li>
<p>话多必失，人多的场合少说话。</p>
</li>
<li>
<p>把未出口的“不”改成“这需要时间”“我尽力”“我不确定”“当我决定后会给你打电话”……</p>
</li>
<li>
<p>不要期望所有人都喜欢你，那是不可能的，让大多数人喜欢就是成功的表现。</p>
</li>
<li>
<p>最重要的，自己要喜欢自己。</p>
</li>
</ol>
<blockquote>
<h3 id="年轻人交朋友要有点弹性">年轻人交朋友要有点弹性</h3>
</blockquote>
<ol>
<li>不任性，不以爱恶喜厌定交往是一个人走向成熟的标志。</li>
<li>所谓弹性，也可以说是对人的一种容纳，大部分人交朋友都弹性不足，因为他们交朋友有太多的原则，比如：看不顺眼的不交，话不投机的不交，有过不愉快的不交……</li>
<li>你会说，话不投机又看不顺眼还要“应付”他们，这样做人会太辛苦。是很辛苦，但你就是要有这样的功夫（除非你想受一辈子穷，或者看破红尘），并且不能让他们感觉你是在“应付”他们。</li>
<li>要想结交到更多的朋友，就应该多着眼于别人的优点和长处。</li>
<li>这里结交的朋友指的是广义的朋友，因为普通朋友和知己还是要有所分别的。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[20201108]]></title>
        <id>https://GoldenRocking.github.io/post/20201108/</id>
        <link href="https://GoldenRocking.github.io/post/20201108/">
        </link>
        <updated>2020-11-07T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h4 id="人生本来就没有什么相欠">人生本来就没有什么相欠，</h4>
<h4 id="别人对你付出是因为别人喜欢">别人对你付出，是因为别人喜欢。</h4>
<h4 id="你对别人付出是因为自己甘愿">你对别人付出，是因为自己甘愿。</h4>
<h4 id="情出自愿事过无悔">情出自愿，事过无悔。</h4>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[勾勒职业成长蓝图，很多东西比薪水更重要]]></title>
        <id>https://GoldenRocking.github.io/post/勾勒职业成长蓝图，很多东西比薪水更重要/</id>
        <link href="https://GoldenRocking.github.io/post/勾勒职业成长蓝图，很多东西比薪水更重要/">
        </link>
        <updated>2020-11-06T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>读书笔记--《二十几岁如何投资自己》</p>
<blockquote>
<h3 id="找到适合自己的发展平台">找到适合自己的发展平台</h3>
</blockquote>
<ol>
<li>生活中，那些只图一时之利，忽略长远的人，很难有什么大的作为，挣的也只是小钱、辛苦钱，饿不死也撑不着。</li>
<li>不能被眼前利益冲昏头脑，更应该看透工作的实质，看它是否具有发展潜力。</li>
<li>有难度、有挑战的工作虽然不好做，见效慢，但只要我们咬牙挺过去，眼前就会呈现出一条希望之路。</li>
<li>决定我们命运的不是老天，也不是别人，而是我们自己的选择！</li>
<li>对我们适合，能发挥我们特长和潜力的工作才是我们要找的。</li>
</ol>
<blockquote>
<h3 id="热门行业不等于职业前景">热门行业不等于职业前景</h3>
</blockquote>
<ol>
<li>懂得避开热门行业中的冷门职位，或善于发现冷门行业中有潜力、成长性的职位，才是职场中的聪明人。</li>
<li>成长性强的职业应具备两个条件：其一，在市场上，与该职业相关的人才供不应求；其二，提供相关职位的企业，发展态势大多蒸蒸日上，在政策方面拥有不少利好消息。</li>
<li>无论从事什么职业，都要努力把它做好。</li>
</ol>
<blockquote>
<h3 id="确立人生目标把精力集中到一点">确立人生目标，把精力集中到一点</h3>
</blockquote>
<ol>
<li>有了目标，内心的力量才会找到方向。</li>
<li>规划你的人生时，确定目标是首要的战略问题。</li>
<li>如果你想成功，就要学会使用“凸透镜”，把自己的精力集中在一点上，也就是我们通常所说的“好钢用在刀刃上”。</li>
<li>一旦我们树立了一个人生目标，就要集中所有的力量去实现它。</li>
<li>我们不能把有限的力量分散在多个问题上，每个问题都想去解决，最终可能连一个都解决不了。</li>
</ol>
<blockquote>
<h3 id="先求升值再谈升职">先求升值，再谈升职</h3>
</blockquote>
<ol>
<li>当你选择了一个行业，进入一家公司工作后，如果要升职，你就必须不断地学习和锻炼，让自己的能力升值，给老板一个提升你的理由，这样你才能拥有自己想要的东西。</li>
</ol>
<blockquote>
<h3 id="事业是做出来的不是跳出来的">事业是做出来的，不是跳出来的</h3>
</blockquote>
<ol>
<li>无论如何取舍，不会有人为你的失误买单，跳槽也存在风险，要经过充分考虑。</li>
<li>因为你还没有把你的工作当成事业来做，你没有在其中投入心力和激情，所以无论怎样换工作，你的工作就只是工作而已，你干不了理想中的“大事业”。</li>
<li>把职业当成自己为之毕生奋斗的事业，日积月累，用心做好每一天的事。</li>
<li>只有你真正为自己找到奋斗的事业，以此不断激励自己刻苦实干，你才能真正成就丰功伟业。</li>
</ol>
<blockquote>
<h3 id="给自己打上优秀的标签并且秀出来">给自己打上“优秀”的标签，并且“秀”出来</h3>
</blockquote>
<ol>
<li>不断提升自己的专业能力。</li>
<li>拥有谦虚的态度。</li>
<li>维持学习力及学习心。</li>
<li>强化沟通能力。</li>
<li>亲和力。</li>
<li>以整洁利落的风貌来表达你充沛的精力及良好的态度，是职场人士必备的能力。</li>
<li>要想出人头地，首先要让领导注意到你，而后才有可能重视你。晋升之路通过领导实现，有“野心”的你千万不要太默默无闻了，一定要选择合适的时机“秀”出自己，只有敢“秀”，才可能成功。</li>
</ol>
<blockquote>
<h3 id="一天一点提高你的身价">一天一点提高你的身价</h3>
</blockquote>
<ol>
<li>打工不是为了赚钱，而是为了赚未来。</li>
<li>年轻时出去找工作，我们靠的是文凭，靠的是知识，而当我们积累了一定的资本之后再找工作，靠的就是自己的身价了。</li>
<li>只要多学、多做，就能提升我们的身价。</li>
<li>学会利用周围的一切条件和资源来提升自己。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[发现习惯的力量，建立一生受益的行为模式]]></title>
        <id>https://GoldenRocking.github.io/post/发现习惯的力量，建立一生受益的行为模式/</id>
        <link href="https://GoldenRocking.github.io/post/发现习惯的力量，建立一生受益的行为模式/">
        </link>
        <updated>2020-11-05T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>读书笔记--《二十几岁如何投资自己》</p>
<blockquote>
<h3 id="阅读是准入门槛最低的高贵举动">阅读是准入门槛最低的高贵举动</h3>
</blockquote>
<ol>
<li>
<p>读书跟环境和时间没有关系，关键在于你有没有养成阅读的习惯。</p>
</li>
<li>
<p>阅读分成三个层面：第一是每天为工作而阅读，第二是为职业而阅读，第三则是为自己而阅读。</p>
</li>
<li>
<p>读书可以使人明心、清脑、益智、养气。明心指读书可以开阔人的心胸，涤荡人的灵魂；清脑指读书可以拓宽人的思路，开阔人的视野；益智指读书可以增长人的智慧和才干；养气则指读书能陶冶人的情操，提高人的自身修养和气质。</p>
</li>
<li>
<p>二十几岁的年轻人，必须要求自己每天阅读半小时。</p>
</li>
<li>
<p>读书也是讲究方法的 ：</p>
</li>
<li>
<ul>
<li>博采众长</li>
<li>莫做书奴</li>
<li>择优而读</li>
</ul>
</li>
</ol>
<blockquote>
<h3 id="立即行动是所有成功者共同的习惯">立即行动是所有成功者共同的习惯</h3>
</blockquote>
<ol>
<li>每一个成功人士都是行动家，不是空想家；每一个赚钱的人都是实践派，而不是理论派。</li>
<li>想成功就要从现在起养成马上行动的好习惯。</li>
<li>如果你现在有一个梦想或者目标，就积极行动起来吧！</li>
<li>行动起来，在行动中解决问题，一步步走向成功。</li>
</ol>
<blockquote>
<h3 id="独立是年轻人成长中最重要的一课">独立是年轻人成长中最重要的一课</h3>
</blockquote>
<ol>
<li>做什么事都要靠自己。</li>
<li>遇事不再等别人拿主意，自己设计、自己决断；</li>
<li>发表言论，不再附和别人的见解，而能表达自己独到的见解；</li>
<li>困难面前，不再等待别人的援助，而是自己想办法克服，挺过去；</li>
<li>经常有意把自己置于一个孤立无援的绝境，锻炼自己掌控命运的能力。</li>
<li>依赖自己，而不是依赖别人、依赖组织、依赖亲人。一切都靠自己去奋斗、去争取。只有一切依靠自己，才能获得真正的成功。</li>
<li>要消除依赖心理，先要消除身上的惰性。要消除惰性，就得锻炼自己的意志。处理事情的时候，要果敢向前、说做就做、该出手时就出手；还得有灵活的头脑，要善于思考、勤于思考。</li>
<li>要有独立意识，要自己替自己做主。</li>
<li>要从小事做起。每天认真反思自己的所作所为，一步一个脚印地去做。</li>
</ol>
<blockquote>
<h3 id="珍惜时间你的时间会越来越有价值">珍惜时间，你的时间会越来越有价值</h3>
</blockquote>
<ol>
<li>设定工作及生活目标，排好优先次序并照此执行；</li>
<li>每天把要做的事列出一张清单；</li>
<li>停下来想一下，现在做什么事最能有效地利用时间，然后立即去做；</li>
<li>不做无意义的事；</li>
<li>做事力求完成；</li>
<li>立即行动，不可等待、拖延。</li>
</ol>
<blockquote>
<h3 id="放下自卑充满自信成长">放下自卑，充满自信成长</h3>
</blockquote>
<ol>
<li>当厄运快要扼住你喉咙的时候，你选择了自卑和屈服，就等于选择了100%的失败；你选择了自信和抗争，可能就争取到了那0.01%的希望。</li>
<li>追求优越是每一个人的基本动机，它是生活本身的一种固有的需要，从“低”到“高”的欲求也永无休止。</li>
<li>有自卑感并不可怕，只要个人始终努力克服自卑，追求优越，自卑就会转化为自信。</li>
<li>建立自信最快、最有效的方法，就是去做一些自己不敢尝试的事，直到获得成功为止。</li>
<li>要想征服畏惧，彻底战胜自卑，不能夸夸其谈，止于幻想，而必须付诸实践，见于行动。</li>
<li>在大庭广众之下讲话，需要巨大的勇气和胆量，这是培养和锻炼自信的重要途径。</li>
<li>正视别人，是积极心态的反映，是自信的象征，更是个人魅力的展示。</li>
</ol>
<blockquote>
<h3 id="不轻视小事把每一件小事做到位">不轻视小事，把每一件小事做到位</h3>
</blockquote>
<ol>
<li>平日工作中，不要轻视你身边的任何一件小事，即便是再简单不过的工作，也要把它做到完美、极致。</li>
<li>成就大事者，绝不应忽略和轻视小事，而是努力从小事做起，认真把小事做到位。</li>
</ol>
<blockquote>
<h3 id="信用是你可以享用一生的珍贵资本">信用是你可以享用一生的珍贵资本</h3>
</blockquote>
<ol>
<li>你可以圆滑、可以世故，也可以为了混下去委曲求全，但是你一定要守信用，要取得别人的信赖，这样，才可以在喧嚣的世界上真正站得稳。</li>
<li>以诚相待是人际交往中最重要的砝码，大多数矛盾都能用诚信的办法解决。</li>
<li>人们都喜欢和诚实的人交往共事。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[最艰难、最美好的时光，你凭借什么变得优秀]]></title>
        <id>https://GoldenRocking.github.io/post/最艰难、最美好的时光，你凭借什么变得优秀/</id>
        <link href="https://GoldenRocking.github.io/post/最艰难、最美好的时光，你凭借什么变得优秀/">
        </link>
        <updated>2020-11-04T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>读书笔记--《二十几岁如何投资自己》</p>
<blockquote>
<h3 id="每天做一两件该做而不想做的事">每天做一两件该做而不想做的事</h3>
</blockquote>
<ol>
<li>
<p>有积极心态的人，他们能正视困难，他们相信，只要去做，总是有成功的机会的。</p>
</li>
<li>
<p>当你碰到困难时，若能正视它，立即采取行动，就会激发专注、创意和毅力。</p>
</li>
<li>
<p>很多时候，如果你放下畏惧和顾虑直接去做，就会发现事情并没有那么难。</p>
</li>
<li>
<p>勇敢面对困难和耐心应付厌烦的事，应当成为一种习惯。</p>
</li>
<li>
<p>有些事情一些人之所以不去做，只是他们认为不可能。有许多不可能，只存在于人的想象之中。</p>
</li>
<li>
<p>面对困难，不要先想着逃避，而是去试一下，把你该做的事做好。</p>
</li>
<li>
<p>每日都做一两件该做而不想做的事，这样面对困难时不但令你喜悦，而且会让你更有成就感。</p>
</li>
</ol>
<blockquote>
<h3 id="努力是要一个结果而不是感动自己">努力是要一个结果，而不是感动自己</h3>
</blockquote>
<ol>
<li>
<p>重视结果，不是否定过程，而是进一步强调对结果负责。</p>
</li>
<li>
<p>成功人士有一个普遍的特点，就是他们在进行一件事情的时候，已经预先估计了事件的结果，然后制定路线图，按照他们的计划一点点地朝着结果迈进。</p>
</li>
<li>
<p>结果使人生超越本能，赋予人生以理性主义的精神、积极入世的情怀和百折不挠的意志。</p>
</li>
<li>
<p>在决定一项计划前，首先想到它会带来什么样的结果，这个结果会不会被社会接受；要是盲目地只求过程，头脑一热地去蛮干，只会离成功越来越远。</p>
</li>
<li>
<p>成功者的第一个重要的思维习惯便是，要清楚地了解自己做每一件事情的目的。</p>
</li>
</ol>
<blockquote>
<h3 id="谁家年少无挫伤成长比输赢更重要">谁家年少无挫伤，成长比输赢更重要</h3>
</blockquote>
<ol>
<li>
<p>成功者辛苦一阵子，就能够帮助自己成功，然而失败者却要辛苦一辈子。</p>
</li>
<li>
<p>怕苦是会苦一辈子的，而不怕苦只会苦一阵子。</p>
</li>
<li>
<p>如何快速浓缩你的苦一次吃完呢？就是要不断地行动、不断地忍受失败、不断地忍受嘲笑、不断地接受被泼冷水、不断地接受打击，然后还能接着行动。</p>
</li>
<li>
<p>如果你想成功，请你暂时忍受一时的辛苦，拿出努力，快速行动起来。</p>
</li>
<li>
<p>在年轻的时光里，比起玩来，对工作要更感兴趣才行。</p>
</li>
<li>
<p>当苦难不期而至时，我们要视苦难为机遇，向它宣战。当你成功地征服它之后，就能真切地感受到生活的甘甜、人生的价值。</p>
</li>
</ol>
<blockquote>
<h3 id="拒绝低水平重复升级为高配版的自己">拒绝低水平重复，升级为高配版的自己</h3>
</blockquote>
<ol>
<li>
<p>升级就是在原来的基础上更进步，改掉原来的不足，让优势更突出，拒绝在原来的水平上一再重复，打造一个高配版的自己。</p>
</li>
<li>
<p>优秀的学习能力才是走向成功的关键。</p>
</li>
<li>
<p>如果你进步缓慢，你就会被身边数以万计的人超过。</p>
</li>
<li>
<p>如果身边的人一日千里，而我们却选择原地踏步，两相对照，其实等于拱手认输。</p>
</li>
<li>
<p>如果你想聚集更多的财富，就必须不停地学习，学习新的知识，学习新的赚钱方式，来升级自己的思维。</p>
</li>
<li>
<p>向每一个走进你生活的人提问，期望发现新的观点、有用的信息和珍贵的经验，从而丰富你知识的储备。</p>
</li>
</ol>
<blockquote>
<h3 id="这一次就做好不要寄望于下一次">这一次就做好，不要寄望于下一次</h3>
</blockquote>
<ol>
<li>
<p>永远不要期待下次，争取事事一次做对。</p>
</li>
<li>
<p>其实很多时候，我们没有把该做的事情做好，根本的原因在于没有用心，只做了事情的表面，并没有深入地了解事情的本质。</p>
</li>
<li>
<p>其实，很多情况下，你根本没有“下一次”的机会。</p>
</li>
<li>
<p>具备勤奋的态度是非常重要的，但是还要看是全心投入去做事，还是只是耗费时间和精力去营造认真工作的假象。</p>
</li>
<li>
<p>在接受工作任务的同时，跟自己说：“我能完成！”或“我肯定能做好！”</p>
</li>
<li>
<p>在接受任务的时候对自己说：‘I can do it!（我能完成！）’剩下的就是去很好地实现你的任务。</p>
</li>
</ol>
<blockquote>
<h3 id="不害怕错误不逃避责任">不害怕错误，不逃避责任</h3>
</blockquote>
<ol>
<li>
<p>只有我们从内心深处真正懂得珍惜，懂得珍重我们所拥有的一切，才有可能得到我们想要的人生。</p>
</li>
<li>
<p>态度决定命运，而你的态度决定了你的人生。</p>
</li>
<li>
<p>敢于为自己所犯的错误承担责任，并从中吸取教训，我们才能不断地进步，不断地将自己脑中的旧思想丢弃，从而形成创新思维。</p>
</li>
<li>
<p>一次的错误，那是年轻的代价；两次相同的错误，那是态度的问题，值得商榷；第三次犯下类似的错误，那就是上帝都无法原谅的错误，没有人会原谅这样的人。</p>
</li>
<li>
<p>犯了错误必须自己承担后果，不可迁怒于他人，不可推卸责任。</p>
</li>
<li>
<p>“不害怕为错误负责，勇于从错误中吸取教训”</p>
</li>
</ol>
<blockquote>
<h3 id="培养卓越的个性风格">培养卓越的个性风格</h3>
</blockquote>
<ol>
<li>
<p>个性魅力包括以下几个要素</p>
<ul>
<li>无声语言</li>
<li>表达能力</li>
<li>聆听技巧</li>
<li>说服技能</li>
<li>运用时空的能力</li>
<li>适应他人的能力</li>
<li>重要见识</li>
</ul>
</li>
<li>
<p>良好个性的形成更离不开个人的主观努力，形成良好的个性需要我们从小事做起，从现在做起，从身边做起。</p>
</li>
<li>
<p>我们是要提出人们个性的基本点、共同点，在人们知道自身、了解自身个性之后，去完善与提升自己的个性。</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《代码精进之道：从码农到工匠》读书笔记(思想篇)]]></title>
        <id>https://GoldenRocking.github.io/post/《代码精进之道：从码农到工匠》读书笔记(思想篇)/</id>
        <link href="https://GoldenRocking.github.io/post/《代码精进之道：从码农到工匠》读书笔记(思想篇)/">
        </link>
        <updated>2020-11-03T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="思想篇">思想篇:</h3>
<h5 id="八-抽象">八、抽象</h5>
<ol>
<li>按照维基百科上的解释，抽象是指为了某种目的，对一个概念或一种现象包含的信息进行过滤，移除不相关的信息，只保留与某种最终目的相关的信息。<br>
从另一个角度看，抽象就是简化事物，抓住事物本质的过程。</li>
<li>抽象帮助我们将现实世界的对象抽象成类，完成从现实世界的概念到计算机世界的模型的映射。</li>
<li>面向对象的思想主要包括3个方面：面向对象的分析（Object Oriented Analysis，OOA）、面向对象的设计（Object Oriented Design，OOD），以及我们经常提到的面向对象的编程（Object Oriented Programming，OOP）。</li>
<li>简单来说，抽象的过程就是合并同类项、归并分类和寻找共性的过程。也就是将有内在逻辑关系的事物放在一起，然后给这个分类进行命名，这个名字就代表了这组分类的抽象。</li>
<li>在开发工作中，很多时候就需要通过抽象层次的提升来提高代码的可读性和通用性。</li>
<li>为什么阅读书籍比看电视更好呢？因为图像比文字更加具象，阅读的过程可以锻炼我们的抽象能力、想象能力，而看画面时你的大脑会被铺满，较少需要抽象和想象。</li>
<li>做总结最好的方式就是写文章，小到博文，大到一本书，都是锻炼自己抽象思维和结构化思维的机会。记录也是很好的总结习惯。以读书笔记来说，最好不要原文摘录书中的内容，而是要用自己的话总结归纳，这样不仅可以加深理解，还可以提升自己的抽象思维能力。</li>
<li>对于技术人员来说，还有一个非常好的提升抽象能力的手段——领域建模。当我们对问题域进行分析、整理和抽象时，或对领域进行划分和建模时，实际上都是在锻炼我们的抽象能力。</li>
</ol>
<h5 id="九-分治">九、分治</h5>
<ol>
<li>“分”就是递归地将原问题分解成小问题；“治”则是在解决了各个小问题（各个击破）之后合并小问题的解，从而得到整个问题的解。</li>
<li>分治法解题的一般步骤如下。<br>
（1）分解：将要解决的问题划分成若干规模较小的同类问题。<br>
（2）求解：当子问题划分得足够小时，用较简单的方法解决。<br>
（3）合并：按原问题的要求，将子问题的解逐层合并，构成原问题的解。</li>
<li>关于函数分解，在此强调以下两点。<br>
（1）函数长短是职责单一的充分不必要条件，也就是长函数往往意味着职责不单一，但是短函数也不一定就意味着职责单一。<br>
（2）在使用组合函数模式时，要注意抽象层次一致性原则（Single Level ofAbstration Principle，SLAP），不同抽象层次的内容放在一起会给人凌乱、逻辑不协调的感觉。</li>
<li>优雅的代码很少是一次成形的，大部分情况下要经过两次创造：第一遍实现功能，第二遍重构优化。</li>
<li>重构优化，即在第一遍实现功能的基础上，看一看是否可以做得更好：命名合理吗？职责单一吗？满足OCP吗？函数是否过长？抽象是否合理？</li>
<li>分层架构的目的是通过分离关注点来降低系统的复杂度，同时满足单一职责、高内聚、低耦合、提高可复用性和降低维护成本，也是一种典型的分治思想。</li>
<li>所谓竖切，就是按照领域将单体数据库拆分成多个数据库。比如，原来电商数据都是放在一个库中，我们可以按照领域拆分成商品库、会员库、交易库等。</li>
<li>横切是通过一种数据路由算法对数据进行分片，从而减少一个数据库中的数据量。比如，我们要将会员的交易数据切分成10个库，可以用userId对10进行取模。</li>
</ol>
<h5 id="十-技术人的素养">十、技术人的素养</h5>
<ol>
<li>
<p>不教条</p>
</li>
<li>
<p>批判性思维</p>
<ul>
<li>批判性思维（Critical Thinking）是一种谨慎运用推理去断定一个断言是否为真的能力。它要求我们保持思考的自主性和逻辑的严密性，不被动地全盘接受，也不刻意地带着偏见去驳斥一个观点。</li>
<li>尼尔·布朗写的被誉为批判性思维领域经典读物的《学会提问》，另一本是樊登读书会推荐的《思辨与立场：生活中无处不在的批判性思维工具》</li>
</ul>
</li>
<li>
<p>成长型思维</p>
<ul>
<li>越挫越勇，把每一次失败都当成学习的机会。</li>
<li>具有成长型思维的人相信自己可以通过学习来提升自我，相信学习和成长的力量，相信努力可以改变智力和能力。</li>
<li>我们需要具备成长型思维才能应对工作和生活中的压力，这样在遇到问题时，我们才不会轻言放弃，而是会积极主动地去学习，去寻找解决方案。</li>
</ul>
</li>
<li>
<p>结构化思维</p>
<ul>
<li>
<p>结构化思维的定义就是“逻辑+套路”。</p>
</li>
<li>
<p>所谓逻辑，是指结构之间必须是有逻辑关系的。</p>
</li>
<li>
<p>组织思想的逻辑只有4种。</p>
<p>（1）演绎顺序：比如“大前提、小前提、结论”的演绎推理方式就是演绎顺序的。</p>
<p>（2）时间（步骤）顺序：比如“第一、第二、第三”和“首先、再者、然后”等，大多数的时间顺序同时也是因果顺序。</p>
<p>（3）空间（结构）顺序：比如“前端、后端、数据”和“波士顿、纽约、华盛顿”等，化整为零（将整体分解为部分）等都是空间顺序。在做空间分解时，要注意满足“相互独立，完全穷尽”（Mutually Exclusive Collectively Exhaustive，MECE）原则。<br>
（4）程度（重要性）顺序：比如“最重要、次重要、不重要”等。</p>
</li>
<li>
<p>套路是指我们解决问题的方法论、路径和经验。</p>
</li>
<li>
<p>逻辑是一种能力，而套路是方法论、经验；逻辑属于道，而方法论属于术。二者都很重要，只有熟练地掌握二者，我们才能有更好的结构化思维。</p>
</li>
<li>
<p>最清晰和实用的结构化表达是“提出问题，定义问题，分析问题，解决问题，最后展望未来”。</p>
</li>
</ul>
</li>
<li>
<p>工具化思维</p>
<ul>
<li>偷懒也有高低之分，可以分为3个境界。<br>
（1）最差的境界是“实在懒”，拖延不喜欢的任务。<br>
（2）其次是“开明懒”，迅速做完不喜欢的任务，以摆脱之。<br>
（3）最高的境界是“智慧懒”，编写某个工具来完成不喜欢的任务，以便再也不用做这样的事情了，从而一劳永逸。</li>
<li>“硬干”或“苦干”并没有带着光环，而是一种徒劳、低效、大可不必的努力，只会说明你做事情很急切，但并不是在完成工作。人们容易混淆行动与进展、混淆忙碌与多产的概念。</li>
<li>在有效的工作中，最重要的是思考，而人在思考时通常看上去不会很忙。如果和我共事的程序员总是忙个不停，我会认为他并非优秀的程序员，因为他没用最有价值的工具——自己的大脑。</li>
<li>每当你重复同样的工作3次以上，就应该停下来问问自己：我是不是可以通过自动化脚本、配置化，或者小工具来帮助自己提效？</li>
</ul>
</li>
<li>
<p>好奇心</p>
<ul>
<li>好奇心是学习的起点，是创新的原动力。我们每个人都应该像小孩子一样保持对知识的渴望，对世界的惊奇。</li>
</ul>
</li>
<li>
<p>记笔记</p>
<ul>
<li>首先，做笔记的人基本都是持续学习的人；其次，记录本身也有很多好处。<br>
（1）知识内化：记笔记的过程是一个归纳整理、再理解、再吸收的过程，可以加深我们对知识的理解。<br>
（2）形成知识体系：零散的知识很容易被遗忘，而形成知识体系之后，知识之间就能有更强的连接。<br>
（3）方便回顾：笔记就像我们的硬盘，当缓存失效后，我们依然可以通过硬盘调回，保证知识不丢失。</li>
<li>（1）使用云笔记：云笔记要能在多端使用，要有目录的层次结构、标签和搜索功能。如果有些场合只能用笔做记录，也没关系，回来之后再整理到云笔记上。<br>
（2）归类分组：要定期回顾笔记内容，尽量按照合理的方式对笔记进行重组，形成一个有逻辑关系的树形结构。这样既方便记忆检索，也可以逐渐形成自己的知识体系。对于归于A组或B组都没错的笔记，可以使用标签来辅助分类。<br>
（3）不要复制粘贴：好的笔记最好是自己消化后的总结，而不是简单的照抄。如果有引用和参考，建议把链接也放在笔记下面，方便溯源。<br>
（4）结构化表达：对于简短的内容要重点突出，粗体显示重点部分；对于篇幅较长的内容，最好有目录，这样可以更加结构化地呈现笔记内容。</li>
</ul>
</li>
<li>
<p>有目标</p>
<ul>
<li>“你要做一个什么样的人”并不是一个可有可无的次要问题，而是首先要回答的头等大问题。</li>
<li>先想清楚目标，然后努力实现。不管是人生大问题，还是阶段性要完成的事情，都需要目标清晰、有的放矢。</li>
<li>在这个信息爆炸的时代，如果只是碎片化地接收各个公众号推送的文章，学习效果几乎可以忽略不计。在学习之前，我们一定要问自己，这次学习的目标是什么？</li>
</ul>
</li>
<li>
<p>选择的自由</p>
<ul>
<li>自由是一种价值观，是一种为自己过去、现在及未来的行为负责的价值观。自由是一种责任，是一种敢于做出选择，并愿意为自己的选择承担后果的责任。</li>
<li>责任感（Responsible），从构词法来说是“能够回应（Response—able）”的意思，即选择回应的能力。</li>
<li>积极主动的人有选择的自由，而消极被动的人往往是被动地接受影响，忘记了自己的主观能动性，忘记了在刺激和回应之间还有选择的自由。</li>
<li>但凡成大事者，都能够“处乱世而不惊，临虚空而不惧，喜迎阴晴圆缺，笑傲雨雪风霜”。正因为他们是自己思维的主人，而不是被思维所控制，他们知道不管身处什么样的境地，都有“选择的自由”。</li>
</ul>
</li>
<li>
<p>平和的心态</p>
<ul>
<li>首先，我们做事情的出发点必须是善的。其次，“有为的事”是指要认真做事，认真生活；“无为的心”代表一种平和的心态，一种活在当下的智慧。也就是做事要积极，但是心态要放平。</li>
<li>真正平和的人了解自己所有的主观感受都只是一瞬间的波动。虽然疼痛，但不再感到悲惨；虽然愉悦，但不再干扰心灵的平静。于是，心灵变得一片澄明、自在。心灵平静的力量十分强大，那些穷极一生疯狂追求愉悦心情的人完全难以想象。</li>
</ul>
</li>
<li>
<p>精进</p>
<ul>
<li>精进就是你每天必须进步一点点！</li>
<li>巴菲特说：“人生就像滚雪球，关键是要找到足够湿的雪，和足够长的坡。”</li>
<li>但凡能持续学习和精进的人，其结果都不会差。</li>
</ul>
</li>
</ol>
<h5 id="十一-技术leader的修养">十一、技术Leader的修养</h5>
<blockquote>
<h5 id="技术氛围">技术氛围</h5>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>代码好坏味道</li>
<li>技术分享</li>
<li>CR周报</li>
<li>读书会</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<h6 id="目标管理">目标管理</h6>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>一个好的Leader，应该是愿意花时间和下属一起讨论、制定目标的。在过程中，给予帮助和指导，及时对焦纠偏，确保目标的达成。</li>
<li>目标管理的常见手段有关键绩效指标（Key Performance Index，KPI）和目标与关键成果（Objectives Key Results，OKR）两种方法。相比较而言，一味地追求KPI，可能会导致短视；OKR更注重短期利益和长期战略之间的平衡。</li>
<li>OKR主要有如下两个特点。<br>
（1）OKR可以不和绩效挂钩，主要强调沟通和方向。<br>
（2）OKR比KPI多了一个层级的概念，O（Objective）是要有野心的、有一定的模糊性，但是KR（Key Results）需要是可量化的，并且KR一定要为O服务，不能偏离O的方向。</li>
<li>SMART原则 : S代表Specific，表示指标要具体；M代表Measurable，表示指标要可衡量；A代表Attainable，表示指标是有可能达成的；R代表Relevant，表示KR和O要有一定的相关性；最后，T代表Time bound，表示指标必须具有明确的截止期限。</li>
<li>OKR中的目标必须是有野心的。因为只有高远的目标，才能最大程度地激发人的潜能。</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<h6 id="技术规划">技术规划</h6>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>技术规划更多的是从团队视角去看接下来要做的事情，而目标管理是要把规划要做的事情进行拆解，和个人目标对齐。</li>
<li>第一层问题解决是最直接的，主要看团队中现在有什么迫切、紧急的问题需要解决，有哪些坑要去填。</li>
<li>技术领域要做的是在这些常规领域中，根据业务情况和团队情况选择一些领域和命题（比如稳定、性能、效率等），并在这些命题和方向中根据优先级做判断。</li>
<li>让业务先赢是技术的首要使命。</li>
<li>作为技术团队，我们要对比团队内外技术的异同，最终圈定一个差异化区域。这块区域是团队的特色技术，是团队借外力之外要修内功的部分，是不依赖别人而主要靠自己突破的部分，是团队相比外面的差异化竞争力。</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<h6 id="推理阶梯">推理阶梯</h6>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>“推理阶梯”的发生会经历以下步骤。:<br>
（1）收集数据<br>
（2）选择性接收数据<br>
（3）做出假设，得出结论，采取行动</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<h6 id="leader和manager的区别">Leader和Manager的区别</h6>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>Manager是管理事务，是控制和权威；而Leader是领导人心，是引领和激发。</li>
<li>技术Leader是专业性非常强的工作。技术Leader区别于其他Leader之处是你不仅要“以德服人”，还要“以技服人”。</li>
</ul>
</blockquote>
</blockquote>
<blockquote>
<h6 id="视人为人">视人为人</h6>
</blockquote>
<blockquote>
<blockquote>
<ul>
<li>俗话说“做事先做人”，我们唯有尊重自己，尊重他人，视人为人，视己为人，对团队倾注感情，和团队成员建立信任关系，才有可能做一个好Leader。</li>
<li>我们做事情的出发点必须要是正的、善的。在这个大前提下，我们可以积极地拓展自己的人脉关系和影响力。</li>
<li>视人为人不仅是和他人处好关系，也是一种原则和勇气。</li>
<li>对待上级——有胆量。对待平级——有肺腑。对待下级——有心肝。</li>
</ul>
</blockquote>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《代码精进之道：从码农到工匠》读书笔记(技艺篇)]]></title>
        <id>https://GoldenRocking.github.io/post/《代码精进之道：从码农到工匠》读书笔记(技艺篇)/</id>
        <link href="https://GoldenRocking.github.io/post/《代码精进之道：从码农到工匠》读书笔记(技艺篇)/">
        </link>
        <updated>2020-11-03T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="技艺篇">技艺篇:</h3>
<h5 id="一-命名">一、命名</h5>
<ol>
<li>
<p>命名为什么难呢？因为命名的过程本身就是一个抽象和思考的过程，在工作中，当我们不能给一个模块、一个对象、一个函数，甚至一个变量找到合适的名称的时候，往往说明我们对问题的理解还不够透彻，需要重新去挖掘问题的本质，对问题域进行重新分析和抽象，有时还要调整设计和重构代码。因此，好的命名是我们写出好代码的基础。</p>
</li>
<li>
<p>变量名应该是名词，能够正确地描述业务，有表达力。如果一个变量名需要注释来补充说明，那么很可能说明命名就有问题。</p>
</li>
<li>
<p>函数命名要具体，空泛的命名没有意义。例如，processData()就不是一个好的命名，因为所有的方法都是对数据的处理，这样的命名并没有表明要做的事情</p>
</li>
<li>
<p>函数的命名要体现做什么，而不是怎么做。假如我们将雇员信息存储在一个栈中，现在要从栈中获取最近存储的一个雇员信息，那么getLatestEmployee()就比popRecord()要好。</p>
</li>
<li>
<p>实体类承载了核心业务数据和核心业务逻辑，其命名要充分体现业务语义，并在团队内达成共识，如Customer、Bank和Employee等。</p>
</li>
<li>
<p>辅助类是辅佐实体类一起完成业务逻辑的，其命名要能够通过后缀来体现功能。</p>
</li>
<li>
<p>对于辅助类，尽量不要用Helper、Util之类的后缀，因为其含义太过笼统，容易破坏SRP（单一职责原则）。</p>
</li>
<li>
<p>包（Package）代表了一组有关系的类的集合，起到分类组合和命名空间的作用。包名应该能够反映一组类在更高抽象层次上的联系。包的命名要适中，不能太抽象，也不能太具体。</p>
</li>
<li>
<p>每个概念对应一个词，并且一以贯之。例如，fetch、retrieve、get、find和query都可以表示查询的意思，如果不加约定地给多个类中的同种查询方法命名，你怎么记得是哪个类中的哪个方法呢？</p>
</li>
<li>
<p>遵守对仗词的命名规则有助于保持一致性，从而提高代码的可读性。像first/last这样的对仗词就很容易理解；而像fileOpen()和fClose()这样的组合则不对称，容易使人迷惑。</p>
</li>
<li>
<p>很多程序中会有表示计算结果的变量，例如总额、平均值、最大值等。如果你要用类似Total、Sum、Average、Max、Min这样的限定词来修改某个命名，那么记住把限定词加到名字的最后，并在项目中贯彻执行，保持命名风格的一致性。</p>
</li>
<li>
<p>统一业务语言,统一技术语言</p>
</li>
<li>
<p>好的代码是最好的文档</p>
</li>
<li>
<p>使用设计模式语言也是代码自明的重要手段之一，在技术人员之间共享和使用设计模式语言，可以极大地提升沟通的效率。当然，前提是大家都要理解和熟悉这些模式，否则就会变成“鸡同鸭讲”。</p>
</li>
<li>
<p>别给糟糕的代码加注释——重新写吧。</p>
</li>
<li>
<p>在写注释时，你应该自省自己是否在表达能力上存在不足，真正的高手是尽量不写注释。</p>
</li>
<li>
<p>注释要能够解释代码背后的意图，而不是对功能的简单重复。</p>
</li>
<li>
<p>当你不知道如何优雅地给变量命名时，可以使用命名工具，快速搜索大型项目中的变量命名，看其他大型项目源码是如何命名的。</p>
</li>
</ol>
<h5 id="二-规范">二、规范</h5>
<ol>
<li>所谓认知，是指人们获得知识或应用知识的过程。获得知识是要学习的，在学习过程中，我们要交的学费叫作认知成本。</li>
<li>混乱的代价在于让我们对事物无法形成有效的记忆和认知，导致我们每次面对的问题都是新问题，每次面临的场景都是新场景，又要重新理解一遍。</li>
<li>代码格式，可能会因为语言和个人偏好而不同，但是一个团队最好是选定一种格式，因为一致性可以减少复杂度。</li>
<li>将概念相关的代码放在一起：相关性越强，彼此之间的距离应该越短。</li>
<li>语言的命名风格多样，无可厚非，但是在同一种语言中，如果使用多种语言的命名风格，就会令其他开发工程师反感。</li>
<li>开发人员应在一开始就养成良好的撰写日志的习惯，并在实际的开发工作中为写日志预留足够的时间。</li>
<li>详细的日志输出级别分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者自定义的级别。我认为比较有用的4个级别依次是ERROR、WARN、INFO和DEBUG。</li>
<li>在业务系统中设定两个异常，分别是BizException（业务异常）和SysException（系统异常），而且这两个异常都应该是Unchecked Exception。</li>
<li>错误码非常重要，一定要在系统搭建之初就制定好相应的规范，否则当系统上线后，系统的错误码已经对前端或者外部系统进行了透出，再重构的可能性就很小了。</li>
<li>从某种意义上来说，架构就是一组约束，遵从了这些约束，才能符合架构要求；反之，架构将失去意义。</li>
<li>任何一种已存在的不良现象都在传递着一种信息，会导致不良现象无限扩展，同时必须高度警觉那些看起来是偶然的、个别的、轻微的“过错”，如果对“过错”不闻不问、熟视无睹、反应迟钝或纠正不力，就会纵容更多的人“去打烂更多的窗户”，极有可能演变成“千里之堤，溃于蚁穴”的恶果。</li>
</ol>
<h5 id="三-函数">三、 函数</h5>
<ol>
<li>
<p>最理想的参数数量是零（零参数函数），其次是一（一元函数），再次是二（二元函数），应尽量避免三（三元函数）。有足够特殊的理由，才能用3个以上参数（多元函数）。当然凡事也不是绝对的，关键还是看场景，在程序设计中，一大忌讳就是教条。</p>
</li>
<li>
<p>函数的第一规则是要短小，第二规则是要更短小。</p>
</li>
<li>
<p>超长方法是典型的代码“坏味道”，对超长方法的结构化分解是提升代码可读性最有效的方式之一。</p>
</li>
<li>
<p>一个方法只做一件事情，也就是函数级别的单一职责原则.</p>
</li>
<li>
<p>遵循SRP不仅可以提升代码的可读性，还能提升代码的可复用性。</p>
</li>
<li>
<p>组合函数要求所有的公有函数（入口函数）读起来像一系列执行步骤的概要，而这些步骤的真正实现细节是在私有函数里面。组合函数有助于代码保持精炼并易于复用。</p>
</li>
<li>
<p>只有养成精益求精、追求卓越的习惯，才能保持精进，写出好的代码。</p>
</li>
<li>
<p>在函数式编程中，函数不仅可以调用函数，也可以作为参数被其他函数调用。</p>
</li>
</ol>
<h5 id="四-设计原则">四、 设计原则</h5>
<ol>
<li>所谓原则，就是一套前人通过经验总结出来的，可以有效解决问题的指导思想和方法论。遵从原则，可以事半功倍。</li>
<li>SOLID是5个设计原则开头字母的缩写,5个原则分别如下:<br>
·Single Responsibility Principle（SRP）：单一职责原则。<br>
·Open Close Principle（OCP）：开闭原则。<br>
·Liskov Substitution Principle（LSP）：里氏替换原则。<br>
·Interface Segregation Principle（ISP）：接口隔离原则。<br>
·Dependency Inversion Principle（DIP）：依赖倒置原则。</li>
<li>SRP要求每个软件模块职责要单一，衡量标准是模块是否只有一个被修改的原因。职责越单一，被修改的原因就越少，模块的内聚性（Cohesion）就越高，被复用的可能性就越大，也更容易被理解。</li>
<li>软件实体应该对扩展开放，对修改关闭。对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。对修改关闭，意味着类一旦设计完成，就可以独立完成工作，而不要对其进行任何修改。</li>
<li>在面向对象设计中，我们通常通过继承和多态来实现OCP，即封装不变部分。对于需要变化的部分，通过接口继承实现的方式来实现“开放”。</li>
<li>LSP认为“程序中的对象应该是可以在不改变程序正确性的前提下被它的子类所替换的”，即子类应该可以替换任何基类能够出现的地方，并且经过替换后，代码还能正常工作。</li>
<li>在程序中，通常使用父类来进行定义，如果一个函数只存在子类中，在父类中不提供相应的声明，则无法在以父类定义的对象中使用该函数。可以通过提升抽象层次来解决此问题，也就是将子类中的特有函数用一种更抽象、通用的方式在父类中进行声明。这样在使用父类的地方，就可以透明地使用子类进行替换。</li>
<li>接口隔离原则认为不能强迫用户去依赖那些他们不使用的接口。换句话说，使用多个专门的接口比使用单一的总接口要好。</li>
<li>满足ISP之后，最大的好处是可以将外部依赖减到最少。你只需要依赖你需要的东西，这样可以降低模块之间的耦合（Couple）。</li>
<li>模块之间交互应该依赖抽象，而非实现。DIP要求高层模块不应该依赖于低层模块，二者都应该依赖于抽象。抽象不应该依赖细节，细节应该依赖抽象。</li>
<li>DRY是Don’t Repeat Yourself的缩写，DRY原则特指在程序设计和计算中避免重复代码，因为这样会降低代码的灵活性和简洁性，并且可能导致代码之间的矛盾。</li>
<li>系统的每一个功能都应该有唯一的实现。也就是说，如果多次遇到同样的问题，就应该抽象出一个共同的解决方法，不要重复开发同样的功能。</li>
<li>YAGNI（You Ain’t Gonna Need It）的意思是“你不会需要它”，出自Ron Jeffries的Extreme Programming Installed一书。是指你自以为有用的功能，实际上都是用不到的。因此，除了核心的功能之外，其他的功能一概不要提前设计，这样可以大大加快开发进程。它背后的指导思想就是尽可能快、尽可能简单地让软件运行起来。</li>
<li>Rule of Three也被称为“三次原则”，是指当某个功能第三次出现时，就有必要进行“抽象化”了。</li>
<li>KISS（Keep It Simple and Stupid）最早由Robert S. Kaplan在著名的平衡计分卡理论中提出。他认为把事情变复杂很简单，把事情变简单很复杂。好的目标不是越复杂越好，反而是越简洁越好。</li>
<li>真正的“简单”绝不是毫无设计感，上来就写代码，而是“宝剑锋从磨砺出”，亮剑的时候犹如一道华丽的闪电，背后却有着大量的艰辛和积累。真正的简单，不是不思考，而是先发散、再收敛。在纷繁复杂中，把握问题的核心。</li>
<li>POLA（Principle of least astonishment）是最小惊奇原则，写代码不是写侦探小说，要的是简单易懂，而不是时不时冒出个“Surprise”。</li>
</ol>
<h5 id="五-设计模式">五、 设计模式</h5>
<ol>
<li>设计模式（Design Pattern）是一套代码设计经验的总结，并且该经验必须能被反复使用，被多数人认可和知晓。设计模式描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案，具有一定的普遍性，可以反复使用。其目的是提高代码的可重用性、可读性和可靠性。</li>
<li>模式具有一般性、简单性、重复性、结构性、稳定性和可操作性等特征。</li>
<li>根据模式所完成的工作类型来划分，模式可分为创建型模式、结构型模式和行为型模式 。<br>
（1）创建型模式：用于描述“怎样创建对象”，主要特点是“将对象的创建与使用分离”。GoF中提供了单例、原型、工厂方法、抽象工厂、建造者5种创建型模式。<br>
（2）结构型模式：用于描述如何将类或对象按某种布局组成更大的结构，GoF中提供了代理、适配器、桥接、装饰、外观、享元、组合7种结构型模式。<br>
（3）行为型模式：用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。GoF中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器11种行为型模式。</li>
<li>GoF23种设计模式的分类，简要介绍如下:<br>
（1）单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点，以便外部获取该实例，其拓展是有限多例模式。<br>
（2）原型（Prototype）模式：将一个对象作为原型，通过对其进行复制操作而复制出多个和原型类似的新实例。<br>
（3）工厂方法（Factory Method）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。<br>
（4）抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。<br>
（5）建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同的需要分别创建它们，最后构建成该复杂对象。<br>
（6）代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问，即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。<br>
（7）适配器（Adapter）模式：将一个类的接口转换成客户希望的另一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。<br>
（8）桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现的，从而降低了抽象和实现这两个可变维度的耦合度。<br>
（9）装饰（Decorator）模式：动态地给对象增加一些职责，即增加其额外的功能。<br>
（10）外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。<br>
（11）享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。<br>
（12）组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。<br>
（13）模板方法（TemplateMethod）模式：定义一个操作中的算法骨架，将算法的一些步骤延迟到子类中，使子类可以在不改变该算法结构的情况下，重定义该算法的某些特定步骤。<br>
（14）策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。<br>
（15）命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。<br>
（16）职责链（Chain of Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式可以去除对象之间的耦合。<br>
（17）状态（State）模式：允许一个对象在其内部状态发生改变时改变其行为能力。<br>
（18）观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。<br>
（19）中介者（Mediator）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。<br>
（20）迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。<br>
（21）访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。<br>
（22）备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。<br>
（23）解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。</li>
<li>拦截器模式（Interceptor Pattern），是指提供一种通用的扩展机制，可以在业务操作前后提供一些切面的（Cross-Cutting）的操作。这些切面操作通常是和业务无关的，比如日志记录、性能统计、安全控制、事务处理、异常处理和编码转换等。</li>
<li>插件（plug-in）模式扩展方式和普通的对象扩展方式的不同之处在于，普通的扩展发生在软件内部，插件式扩展发生在软件外部。插件模式的实现原理和策略模式类似，要求主程序中做好扩展点接口的定义，然后在插件中进行扩展实现。因此，插件模式的难点不在于如何开发插件，而在于如何实现一套完整的插件框架。</li>
<li>一个典型的管道模式，会涉及以下3个主要的角色。<br>
（1）阀门：处理数据的节点。<br>
（2）管道：组织各个阀门。<br>
（3）客户端：构造管道并调用。</li>
</ol>
<h5 id="六-模型">六、 模型</h5>
<ol>
<li>模型是对现实世界的简化抽象。</li>
<li>根据使用场景的不同，模型大致可以分为物理模型、概念模型、数学模型和思维模型等。</li>
<li>物理模型是拥有体积及重量的物理形态概念实体物件，是根据相似性理论制造的按原系统比例缩小（也可以是放大或与原系统尺寸一样）的实物。</li>
<li>数学模型是用数学语言描述的一类模型，可以是一个或一组代数方程、微分方程、差分方程、积分方程或统计学方程，也可以是某种适当的组合数学模型。利用这些方程可以定量地或定性地描述系统各变量之间的相互关系或因果关系，来描述系统的行为和特征，而不是系统的实际结构。</li>
<li>概念模型是对真实世界中问题域内的事物的描述，是领域实体，而不是对软件设计的描述，它和技术无关。概念模型将现实世界抽象为信息世界，把现实世界中的客观对象抽象为某一种信息结构，这种信息结构并不依赖于具体的计算机系统。</li>
<li>我们把用简单易懂的图形、符号或者结构化语言等表达人们思考和解决问题的形式，统称为思维模型。简单来说，就是我们可以总结出一些能够解决特定问题的“思维套路”，这些套路能帮助我们高效地解决问题。</li>
<li>在软件领域，影响力最强的建模工具当属统一建模语言（Unified ModelingLanguage，UML）了。UML的目标之一是为开发团队提供标准通用的设计语言来开发和构建计算机应用。</li>
<li>关于UML的资料和书籍已有很多。需要进一步学习的读者，推荐阅读Grady Booch等人的《面向对象分析与设计》和Larman的《UML和模式应用》这两本书。</li>
<li>类（Class）封装了数据和行为，是面向对象的重要组成部分，是具有相同属性、操作、关系的对象集合的总称。</li>
<li>每个类都具有一定的职责，职责指的是类要完成什么样的功能，要承担什么样的义务。</li>
<li>类图用于描述类以及它们的相互关系。在分析时，我们利用类图来说明实体共同的角色和责任，这些实体提供了系统的行为。在设计时，我们利用类图来记录类的结构，这些类构成了系统的架构。在类图中，两个基本元素是类，以及类之间的关系。</li>
<li>在UML中，类由包含类名、属性和操作3部分组成，这3部分使用分隔线分隔的矩形表示。</li>
<li>从本质上来说，软件开发过程就是问题空间到解决方案空间的一个映射转化。</li>
<li>在问题空间中，我们主要是找出某个业务面临的挑战及其相关需求场景用例分析；而在解决方案空间中，则通过具体的技术工具手段来进行设计实现。</li>
<li>领域模型在软件开发中的主要起到如下作用。<br>
·帮助分析理解复杂业务领域问题，描述业务中涉及的实体及其相互之间的关系，是需求分析的产物，与问题域相关。<br>
·是需求分析人员与用户交流的有力工具，是彼此交流的语言。<br>
·分析如何满足系统功能性需求，指导项目后续的系统设计。</li>
<li>敏捷建模方法的重点如下:<br>
·模型能用来沟通和理解。<br>
·力争用简单的工具创建简单的模型。<br>
·我们知道需求是变化的，因此创建模型时要拥抱变化。<br>
·重点是交付软件，而不是交付模型。模型能带来价值时，我们就使用；如果模型没有价值，不能加速软件的交付，就不创建它们。</li>
</ol>
<h5 id="七-ddd的精髓">七、DDD的精髓</h5>
<ol>
<li>DDD是Eric Evans在2003年出版的《领域驱动设计：软件核心复杂性应对之道》（Domain-Driven Design: Tackling Complexity in the Heart of Software）一书中提出的具有划时代意义的重要概念，是指通过统一语言、业务抽象、领域划分和领域建模等一系列手段来控制软件复杂度的方法论。</li>
<li>DDD的核心是领域模型，这一方法论可以通俗地理解为先找到业务中的领域模型，以领域模型为中心，驱动项目开发。领域模型的设计精髓在于面向对象分析、对事物的抽象能力，一个领域驱动架构师必然是一个面向对象分析的大师。</li>
<li>在软件的世界里，任何的方法论如果最终不能落在“减少代码复杂度”这个焦点上，那么都是有待商榷的。</li>
<li>代码复杂度是由业务复杂度和技术复杂度共同组成的。实践DDD还有一个好处，是让我们有机会分离核心业务逻辑和技术细节，让两个维度的复杂度有机会被解开和分治。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[20201103]]></title>
        <id>https://GoldenRocking.github.io/post/20201103/</id>
        <link href="https://GoldenRocking.github.io/post/20201103/">
        </link>
        <updated>2020-11-02T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>前世，我为青莲，你为梵音，</p>
<p>一眸擦肩，惊艳了五百年的时光。</p>
<p>花绵绵而绽，音靡靡而绕，低眉含笑间，</p>
<p>谁的深情绚烂了三生石上的一见倾心？</p>
<p>今生，你为高山，我为流水，</p>
<p>长风为歌，幽弦清音，水流脉脉，岭秀倾情。</p>
<p>你一袭洒脱，温柔了我的眉弯，心舟过处，</p>
<p>谁的呼唤柔婉了谁的一帘幽梦？</p>
<p>从此，晓露痴缠，星月为凭，</p>
<p>所有的心事旖旎，所有的呢喃软语，</p>
<p>都，只为了你。</p>
<p>从此，我就在唐诗宋词里痴痴的等，</p>
<p>等你的一个凝眸，将我的深情轻拥入梦；</p>
<p>我就在水墨丹青里脉脉的候，</p>
<p>候你的目光穿越红尘桑田，</p>
<p>轻轻滑过我颤栗的灵魂。</p>
]]></content>
    </entry>
</feed>